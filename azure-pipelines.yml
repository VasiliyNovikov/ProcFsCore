trigger:
- master

stages:
- stage: build
  displayName: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        Ubuntu_18:
          imageName: ubuntu-18.04
        Ubuntu_20:
          imageName: ubuntu-20.04
        Ubuntu_22:
          imageName: ubuntu-22.04
    pool:
      vmImage: $(imageName)
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 6.0.x'
      inputs:
        version: 6.0.x

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 7.0.x'
      inputs:
        version: 7.0.x

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: --configuration Release

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: --configuration Release

    - bash: |
        rm -r $(Build.ArtifactStagingDirectory)
        mkdir -p $(Build.ArtifactStagingDirectory)
      displayName: Cleanup artifacts directory
      
    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: pack
        packagesToPack: ProcFsCore/ProcFsCore.csproj
        configuration: Release
        nobuild: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: package

- stage: publish
  displayName: Publish
  dependsOn:
  - build
  condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
  jobs:
  - deployment:
    pool:
      vmImage: windows-latest
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: Download NuGet package Artifact
            inputs:
              artifactName: package
              downloadPath: $(Build.ArtifactStagingDirectory)

          - task: NuGetCommand@2
            displayName: Push to NuGet
            inputs:
              command: push
              packagesToPush: $(Build.ArtifactStagingDirectory)/package/*.nupkg
              nuGetFeedType: external
              publishFeedCredentials: NuGet.org
